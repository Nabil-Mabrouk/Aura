"""
Django settings for aura project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV_FILE_PATH = BASE_DIR / '.env'
if ENV_FILE_PATH.exists():
    load_dotenv(dotenv_path=ENV_FILE_PATH)

load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j!%n0w#46u4e0tv4dwwlm^yfz+b8wcn^_y_ff-$93t&fo#lx)q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ON_DEVICE = True # <--- Set to True for offline, False for online/CDN
ALLOWED_HOSTS = []

# --- NEW: Groq API Key Setting ---
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Check if the key is missing during startup in debug mode
if DEBUG and not GROQ_API_KEY:
    print("WARNING: GROQ_API_KEY is not set in the .env file.")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'landing',
    'forge'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aura.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.template.context_processors.settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'aura.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # --- THIS IS THE CHANGE ---
        # Look for the database file in a 'database' sub-directory
        # inside the main project directory (/app in the container).
        "NAME": BASE_DIR / "database" / "db.sqlite3", 
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Tell Django where to look for static files that aren't tied to a specific app.
# We will create this directory in the next step.
STATICFILES_DIRS = [
    BASE_DIR / "static", # A project-wide static directory
]

# This is where `collectstatic` will place all files for production deployment.
# It's good practice to define it now.
STATIC_ROOT = BASE_DIR / "staticfiles"



MEDIA_ROOT = BASE_DIR / 'media'
# The URL that handles the media served from MEDIA_ROOT.
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- CELERY SETTINGS ---
# We use the service name 'redis' from our docker-compose.yml
# NEW: Add a flag for on-device/offline mode.
# In a real production setup, you would likely set this from an environment variable.
# Example: ON_DEVICE = os.getenv('ON_DEVICE', 'False').lower() in ('true', '1')
